-- Создание таблицы Departments
CREATE TABLE Departments (
    Id INT PRIMARY KEY IDENTITY(1,1),
    Name NVARCHAR(50) NOT NULL,
    Phone NVARCHAR(20)
);

-- Создание таблицы Teachers
CREATE TABLE Teachers (
    Id INT PRIMARY KEY IDENTITY(1,1),
    LastName NVARCHAR(50) NOT NULL,
    FirstName NVARCHAR(50) NOT NULL,
    BirthDate DATE,
    DepartmentId INT
);

-- Создание таблицы Subjects
CREATE TABLE Subjects (
    Id INT PRIMARY KEY IDENTITY(1,1),
    Name NVARCHAR(50) NOT NULL
);

-- Создание таблицы TeachersSubjects
CREATE TABLE TeachersSubjects (
    TeacherId INT,
    SubjectId INT
	PRIMARY KEY (TeacherId, SubjectId),
);

-- Заполнение таблицы Departments
INSERT INTO Departments (Name, Phone)
VALUES 
('Mathematics', '123-456-789'),
('Physics', '987-654-321'),
('Computer Science', '456-789-123');

-- Заполнение таблицы Teachers
INSERT INTO Teachers (LastName, FirstName, BirthDate, DepartmentId)
VALUES 
('Smith', 'John', '1980-05-12', 1),
('Johnson', 'Alice', '1975-11-25', 2),
('Williams', 'Robert', '1988-02-15', 3),
('Brown', 'Emily', '1990-07-30', 1),
('Davis', 'Michael', '1983-10-10', 2);

-- Заполнение таблицы Subjects
INSERT INTO Subjects (Name)
VALUES 
('Algebra'),
('Geometry'),
('Mechanics'),
('Quantum Physics'),
('Data Structures');

-- Заполнение таблицы TeachersSubjects
INSERT INTO TeachersSubjects (TeacherId, SubjectId)
VALUES 
(1, 1), -- John Smith teaches Algebra
(1, 2), -- John Smith teaches Geometry
(2, 3), -- Alice Johnson teaches Mechanics
(3, 5), -- Robert Williams teaches Data Structures
(4, 3), -- Emily Brown teaches Algebra
(5, 2), -- Michael Davis teaches Mechanics
(5, 4); -- Michael Davis teaches Quantum Physics

/*
	Для того чтобы получить информацию о принадлежности преподавателей к кафедрам можно было написать
	SQL-запрос к одной таблице Teachers, но в этом случае мы получим только идентификаторы кафедр,
	что является не особо информативным. Поэтому необходимо написать SQL-запрос, при помощи которого
	мы будем получать информацию из двух таблиц Departments и Teachers:
*/
SELECT FirstName +' '+ LastName AS FullName, Name
FROM Departments, Teachers
WHERE Teachers.DepartmentId = Departments.Id;

/*
	Если мы работаем со столбцом, у которого имя встречается в двух таблицах, то нобходимо указать через
	точку и название таблицы.
*/
SELECT FirstName +' '+ LastName AS FullName, Name, D.Id AS DeptIdent
FROM Departments AS D, Teachers AS T
WHERE T.DepartmentId = D.Id;

/*
	При помощи следующего SQL-запроса мы хотим определить какие предметы ведет каждый из преподавателей,
	в этом случае нам необходимо связать между собой таблицы Teachers и Subjects, используя таблицу TeachersSubjects:
*/
SELECT FirstName +' '+ LastName AS FullName, Name AS SubjectName
FROM Teachers AS T, Subjects AS S, TeachersSubjects AS TS
WHERE T.Id=TS.TeacherId AND S.Id=TS.SubjectId;

/*
	При помощи заключительного SQL-запроса мы хотим получить информацию о том какие предметы читаются
	на той либо иной кафедре, для чего нам придется установить связь между всеми имеющимися таблицами:
*/
SELECT D.Name AS DeptName, S.Name AS SubjectName
FROM Departments AS D, Teachers AS T, Subjects AS S, TeachersSubjects AS TS
WHERE D.Id = T.DepartmentId AND T.Id=TS.TeacherId AND S.Id=TS.SubjectId;

/*
	При написании многотабличных запросов особое внимание следует уделять установлению взаимосвязи
	между таблицами, вы уже видели это в предыдущих примерах, например: Teachers.DepartmentId = Departments.
	Id — равенство соответствующего первичного и внешнего ключей. Такое сравнение является критически
	важным, если его не указывать, то в результате SQLзапроса вы получите всевозможные сочетания записей
	одной таблицы со всевозможными записями из другой таблицы, полученное множество называется декартовым
	произведением этих таблиц. Продемонстрируем это на примере:
*/
SELECT FirstName +' '+ LastName AS FullName, Name
FROM Departments, Teachers;