-- получаем необходимую информацию из таблицы students
select * from students;

select 'student' + lastName + 'grant' + grants
from students;

select 'student' + lastName + 'grant' + convert(nvarchar(10), grants)
from students;

select TOP 25 percent firstName, lastName, birthDate
from Students;

--

select distinct firstName
from students;

/*

    = – равно;
    <> – не равно;
    > – больше;
    >= – больше или равно;
    !> – не больше чем;
    < – мешьше;
    <= – мешьше или равно;
    !< – не меньше чем;

*/

select firstName + ' ' + lastName as fullname, grants*1.2 as [plus 20 percent]
from students
where grants is not null;

select lastName, firstName, grants
from students
where grants is not null;

-- найти всех студентов, у которых фамилия не иванов.

select * from Students
where lastName <> 'иванов';

--

select Id, lastName, firstName, birthDate, grants
from Students
order by grants asc;

select * from students
order by firstName asc, lastName desc;

/*
    В тех случаях, когда необходимо осуществить поиск по текстовым полям таблиц, существует возможность
    использовать шаблон, который можно задать, применив ключевое слово like. Для того чтобы сформировать
    шаблон необходимо указывать определенные служебные символы или комбинации этихсимволов:

    % - соответствует любой последовательности символов от 0 и более;
    _ - представляет любой одиночный символ;
    [] - задает последовательность или диапазон возможных символов;
    [^] - задает последовательность или диапазон символов, которые должны отсутствовать.

    пример: фамилия начинается на букву И или Е, а имя заканчиватся на букву Н.
*/

select lastName, firstName, birthDate, grants, email
from Students
where lastName, like '32%' and firstName, like '%н';

/*
    следующий зарос вернетс информацию о студентах, у которых в адресе электронной почты вторая цифра
    совпадает ни с одной цифрой из диапазона от 1 до 3;
*/

Select lastName, firstName, birthDate, grants, email
from Students
where email like '__[^1-3]%';

/*
    оператор insert может использоваться двумя спобсобами. В первом случае необходимо указывать имена тех столбцов
    таблицы, в которые вы будете записывать соответствующие значения, указанные после ключевого слова value, общая
    форма записи выглядит следующим образом:

*/

insert into students(firstName, lastName, birthDate, grants, email)
values ('иванова', 'ксения', '2003-12-05', 1205.05,  '129@gmail.com');

/*
    При использовании оператора insert вторым способом названия столбцов таблицы не указываются. Вам необходимо
    указывать значения для всех столбцов, которые не могут принимать неопределенное значение, обязательно соблюдая
    порядок их следования в таблице.
*/

insert into Students
values ('мария', 'петрова', '2012-12-05', null ,'130@gmail.com');

/*
    В языке T-SQL существует возможность заполнения существующей таблицы значениями, полученными
    в результате выполнения sql-запроса. Для этих целей используется оператор insert into Select
*/

insert into temp (firstName, lastName, birthDate)
select firstName, lastName, birthDate
from Students
where month(birthDate) > 6;

delete from temp;

select firstName, lastName, birthDate from temp;

/*
    субд ms sql server предостовляет возможность создания новой таблицы на основе существующей, путем копирования
    значений всех указанных столбцов с использованием оператора select into, общая форма записи выглядит следующим образом:
*/

select firstName, lastName, birthDate, grants
into temp1
from Students
where grants in not null;

select firstName, lastName, birthDate, grants
from temp1;

/*
    update
    для того чтобы изменить любую запись при помощи sql-запроса используется оператор update
*/

update students set grants += 500 where grants is null;

select * from students;

/*
    delete
    для того чтобы удалить определенную информацию из таблиц базы данных программным путем необходимо
    использовать оператор delete
*/

delete from Students
where Id > 5;

/*
понятие транзакции. Использование транзакций

    Под транзакцией понимается последовательность действий, выполняемых как единое целое с возможностью отмены
    каждого из них в случае ошибки. СУБД MS SQL Server обеспечивает поддержку транзакций, которая характеризуется
    четырьмя важными свойствами известными под акронимом ACID:

    Atomicity - определяет целостность транзакции, то есть для успешного завершения транзакции должны
    выполниться либо все операции, составляющие данную транзакцию, либо ни одна из них;
    Consistency - это свойство обеспечивает целостность информации независимо от того успешно завершилать транзакция или нет;
    Isolation - означает, что все транзакции выполняются параллельно и не могут оказывать влияния друг на друга;
    Durability - обеспечивает сохранность всех данных после фиксации успешно выполненной транзакции, независимо
    от возможных сбоев системы.

    Существуюет три типа транзакций:
    явные транзакции - характеризуется явным указанием начала транзакции (begin tran или begin transaction), ее фиксации
    в случае успешного завершения (commit tran или commitn transaction) и с возможностью  прерывания (отката) транзакции
    при возникновении определенного условия (rollback tran или rollback transaction);
    неявные транзакции - транзакции, для которых начало и конец не указываются явным образом, такие
    транзакции происходят при выполнении следующих инструкций – alter table, create, drop, select, insert, delete
    update, grant, revoke, open, fetch, truncate table – каждая из них выполняется как отдельная транзакция;
    автоматические транзакции характерны тем что каждая успешно выполненная операция фиксируется, в противном случае
    для того чтобы перейти в этот режим необходимо выполнить команду set implicit_transaction с параметром off,
    для выхода set implicit_transaction on.

    СУБД MS SQL Server создана как многопользовательская система, то есть система, которая позволяет одновременно
    использовать объекты баз данных несколькими пользователями. В связи с этим существует четыре возможные нарущения
    при работес базами данных:
    чтение незаксированных данных;
    неповторяемое чтение;
    фантомы;
    потерянные обновления.

    Блокировки, применяемые при выполнении транзакций, препятствует взаимодействие с объектами другим процессам,
    тем самым могут служить причиной взаимой изоляции транзакций. Для управления степенью взаимной изоляции
    транзакций существует четыре уровня изолированности транзакций:

    read uncommitted - позвоялет считывать данные, которые были изменены, но не были зафиксированны
    (не предотвращает ни одно из возможных нарушений);
    read committed - не позволяет считывать данные, которые были  изменены, но не были зафиксированны (используется
    по умолчанию) (предотвращает чтение незафиксированных данных);
    repeatable read - никакая транзакция не может изменять данные, считанные текущей транзакцией до ее завершения
    (предотвращет чтение незафиксированных данных и неповторяемое чтение);
    serializable - любые лругие транзакции не могут вставлять/изменять/удалять данные, которые попадают
    в диапазон записей, удовлетворяющих условию, которое задано в операторе where текущей транзакции
    (предотвращает чтение незафиксированных данных, неповторяемое чтение и фантомы).
